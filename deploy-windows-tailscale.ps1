# ========================================
# Deploy Th∆∞ Vi·ªán ·∫¢nh tr√™n Windows 10
# S·ª≠ d·ª•ng Docker + Tailscale
# ========================================

param(
    [switch]$SkipDocker,
    [switch]$Clean,
    [switch]$Rebuild
)

# Colors
function Write-Step {
    param($Message)
    Write-Host "`n========================================" -ForegroundColor Cyan
    Write-Host "  $Message" -ForegroundColor Cyan
    Write-Host "========================================" -ForegroundColor Cyan
}

function Write-Success {
    param($Message)
    Write-Host "‚úÖ $Message" -ForegroundColor Green
}

function Write-Error {
    param($Message)
    Write-Host "‚ùå $Message" -ForegroundColor Red
}

function Write-Info {
    param($Message)
    Write-Host "‚ÑπÔ∏è  $Message" -ForegroundColor Yellow
}

# Check Administrator
if (-NOT ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")) {
    Write-Error "Script c·∫ßn ch·∫°y v·ªõi quy·ªÅn Administrator!"
    Write-Info "Nh·∫•n chu·ªôt ph·∫£i PowerShell v√† ch·ªçn 'Run as Administrator'"
    Exit 1
}

Clear-Host
Write-Step "TH∆Ø VI·ªÜN ·∫¢NH - DOCKER DEPLOYMENT"

# ========================================
# 1. Ki·ªÉm tra Docker Desktop
# ========================================
Write-Step "B∆∞·ªõc 1: Ki·ªÉm tra Docker Desktop"

if (!(Get-Command docker -ErrorAction SilentlyContinue)) {
    Write-Error "Docker Desktop ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t!"
    Write-Host ""
    Write-Info "H∆∞·ªõng d·∫´n c√†i ƒë·∫∑t Docker Desktop:"
    Write-Host "1. T·∫£i Docker Desktop: https://www.docker.com/products/docker-desktop/" -ForegroundColor White
    Write-Host "2. Ch·∫°y file c√†i ƒë·∫∑t" -ForegroundColor White
    Write-Host "3. Kh·ªüi ƒë·ªông l·∫°i m√°y t√≠nh" -ForegroundColor White
    Write-Host "4. M·ªü Docker Desktop v√† ƒë·ª£i kh·ªüi ƒë·ªông ho√†n t·∫•t" -ForegroundColor White
    Write-Host "5. Ch·∫°y l·∫°i script n√†y" -ForegroundColor White
    Write-Host ""
    
    $install = Read-Host "B·∫°n c√≥ mu·ªën t·∫£i Docker Desktop ngay b√¢y gi·ªù? (y/n)"
    if ($install -eq 'y') {
        Start-Process "https://www.docker.com/products/docker-desktop/"
    }
    Exit 1
}

# Ki·ªÉm tra Docker ƒëang ch·∫°y
docker info > $null 2>&1
if ($LASTEXITCODE -ne 0) {
    Write-Info "Docker Desktop ch∆∞a ch·∫°y. ƒêang kh·ªüi ƒë·ªông..."
    Start-Process "C:\Program Files\Docker\Docker\Docker Desktop.exe" -ErrorAction SilentlyContinue
    
    Write-Host "ƒê·ª£i Docker kh·ªüi ƒë·ªông (c√≥ th·ªÉ m·∫•t 1-2 ph√∫t)..." -ForegroundColor Yellow
    $attempts = 0
    while ($attempts -lt 60) {
        Start-Sleep -Seconds 2
        docker info > $null 2>&1
        if ($LASTEXITCODE -eq 0) {
            break
        }
        $attempts++
        Write-Host "." -NoNewline
    }
    Write-Host ""
    
    if ($attempts -eq 60) {
        Write-Error "Docker Desktop kh√¥ng th·ªÉ kh·ªüi ƒë·ªông!"
        Write-Info "Vui l√≤ng m·ªü Docker Desktop th·ªß c√¥ng v√† ch·∫°y l·∫°i script"
        Exit 1
    }
}

Write-Success "Docker Desktop ƒëang ch·∫°y"

# ========================================
# 2. Ki·ªÉm tra Tailscale
# ========================================
Write-Step "B∆∞·ªõc 2: Ki·ªÉm tra Tailscale"

$tailscaleIP = "100.101.50.87"
$currentIP = (Get-NetIPAddress -AddressFamily IPv4 | Where-Object {$_.IPAddress -like "100.*"}).IPAddress

if ($currentIP -eq $tailscaleIP) {
    Write-Success "Tailscale ƒëang ch·∫°y - IP: $tailscaleIP"
} else {
    Write-Info "Tailscale IP hi·ªán t·∫°i: $currentIP"
    Write-Info "IP mong ƒë·ª£i: $tailscaleIP"
    Write-Info "N·∫øu IP kh√°c, c·∫ßn c·∫≠p nh·∫≠t file .env v√† docker-compose.yml"
}

# ========================================
# 3. Chu·∫©n b·ªã th∆∞ m·ª•c d·ª± √°n
# ========================================
Write-Step "B∆∞·ªõc 3: Chu·∫©n b·ªã th∆∞ m·ª•c d·ª± √°n"

$projectPath = "D:\Projects\thuvienanh"
Write-Host "Th∆∞ m·ª•c d·ª± √°n: $projectPath" -ForegroundColor White

if (!(Test-Path $projectPath)) {
    Write-Info "T·∫°o th∆∞ m·ª•c d·ª± √°n..."
    New-Item -Path $projectPath -ItemType Directory -Force | Out-Null
}

Set-Location $projectPath

# Ki·ªÉm tra Git
if (!(Test-Path ".git")) {
    Write-Info "Ch∆∞a c√≥ Git repository. B·∫°n c·∫ßn:"
    Write-Host "1. Clone code t·ª´ repository" -ForegroundColor White
    Write-Host "2. Ho·∫∑c copy code t·ª´ m√°y Mac qua Tailscale" -ForegroundColor White
    Write-Host ""
    Write-Host "V√≠ d·ª• clone:" -ForegroundColor Yellow
    Write-Host "  git clone <repository-url> ." -ForegroundColor Gray
    Write-Host ""
    Write-Host "V√≠ d·ª• copy t·ª´ Mac qua SCP:" -ForegroundColor Yellow
    Write-Host "  scp -r nihdev@<mac-tailscale-ip>:/Users/nihdev/Web/thuvienanh/* ." -ForegroundColor Gray
    
    $continue = Read-Host "`nB·∫°n ƒë√£ c√≥ code trong th∆∞ m·ª•c n√†y ch∆∞a? (y/n)"
    if ($continue -ne 'y') {
        Exit 1
    }
}

Write-Success "Th∆∞ m·ª•c d·ª± √°n OK"

# ========================================
# 4. Ki·ªÉm tra file c·∫ßn thi·∫øt
# ========================================
Write-Step "B∆∞·ªõc 4: Ki·ªÉm tra file c·∫ßn thi·∫øt"

$requiredFiles = @(
    "docker-compose.yml",
    "Dockerfile",
    "package.json",
    "next.config.js"
)

$missingFiles = @()
foreach ($file in $requiredFiles) {
    if (!(Test-Path $file)) {
        $missingFiles += $file
    }
}

if ($missingFiles.Count -gt 0) {
    Write-Error "Thi·∫øu c√°c file sau:"
    foreach ($file in $missingFiles) {
        Write-Host "  - $file" -ForegroundColor Red
    }
    Write-Info "Vui l√≤ng copy ƒë·∫ßy ƒë·ªß code v√†o th∆∞ m·ª•c $projectPath"
    Exit 1
}

Write-Success "T·∫•t c·∫£ file c·∫ßn thi·∫øt ƒë√£ c√≥"

# ========================================
# 5. T·∫°o th∆∞ m·ª•c c·∫ßn thi·∫øt
# ========================================
Write-Step "B∆∞·ªõc 5: T·∫°o th∆∞ m·ª•c"

$directories = @("logs", "backups", "public/uploads")
foreach ($dir in $directories) {
    if (!(Test-Path $dir)) {
        New-Item -Path $dir -ItemType Directory -Force | Out-Null
    }
}

Write-Success "Th∆∞ m·ª•c ƒë√£ ƒë∆∞·ª£c t·∫°o"

# ========================================
# 6. D·ªçn d·∫πp (n·∫øu c·∫ßn)
# ========================================
if ($Clean) {
    Write-Step "B∆∞·ªõc 6: D·ªçn d·∫πp Docker"
    
    Write-Info "D·ª´ng v√† x√≥a containers c≈©..."
    docker-compose down -v 2>$null
    
    Write-Info "X√≥a images c≈©..."
    docker system prune -af --volumes
    
    Write-Success "ƒê√£ d·ªçn d·∫πp Docker"
}

# ========================================
# 7. Build v√† Start Docker
# ========================================
Write-Step "B∆∞·ªõc 7: Kh·ªüi ƒë·ªông Docker Containers"

if ($Rebuild) {
    Write-Info "Build l·∫°i images (c√≥ th·ªÉ m·∫•t 5-10 ph√∫t)..."
    docker-compose build --no-cache
    if ($LASTEXITCODE -ne 0) {
        Write-Error "Build th·∫•t b·∫°i!"
        Exit 1
    }
}

Write-Info "Kh·ªüi ƒë·ªông containers..."
docker-compose up -d

if ($LASTEXITCODE -ne 0) {
    Write-Error "Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông containers!"
    Write-Host ""
    Write-Host "Xem logs ƒë·ªÉ debug:" -ForegroundColor Yellow
    Write-Host "  docker-compose logs" -ForegroundColor Gray
    Exit 1
}

Write-Success "Containers ƒë√£ ƒë∆∞·ª£c kh·ªüi ƒë·ªông"

# ========================================
# 8. ƒê·ª£i services s·∫µn s√†ng
# ========================================
Write-Step "B∆∞·ªõc 8: Ki·ªÉm tra services"

Write-Info "ƒê·ª£i PostgreSQL s·∫µn s√†ng..."
$attempts = 0
while ($attempts -lt 30) {
    $pgHealth = docker exec tva-postgres pg_isready -U postgres 2>$null
    if ($LASTEXITCODE -eq 0) {
        Write-Success "PostgreSQL ƒë√£ s·∫µn s√†ng"
        break
    }
    Start-Sleep -Seconds 2
    $attempts++
    Write-Host "." -NoNewline
}
Write-Host ""

if ($attempts -eq 30) {
    Write-Error "PostgreSQL kh√¥ng kh·ªüi ƒë·ªông ƒë∆∞·ª£c!"
    docker-compose logs postgres
    Exit 1
}

Write-Info "ƒê·ª£i Next.js app s·∫µn s√†ng..."
Start-Sleep -Seconds 5

$attempts = 0
while ($attempts -lt 30) {
    try {
        $response = Invoke-WebRequest -Uri "http://localhost:4000" -UseBasicParsing -TimeoutSec 3 -ErrorAction SilentlyContinue
        if ($response.StatusCode -eq 200) {
            Write-Success "Next.js app ƒë√£ s·∫µn s√†ng"
            break
        }
    } catch {}
    Start-Sleep -Seconds 2
    $attempts++
    Write-Host "." -NoNewline
}
Write-Host ""

# ========================================
# 9. C·∫•u h√¨nh Firewall
# ========================================
Write-Step "B∆∞·ªõc 9: C·∫•u h√¨nh Windows Firewall"

$ports = @(4000, 5051, 5434)
foreach ($port in $ports) {
    Remove-NetFirewallRule -DisplayName "TVA-Port-$port" -ErrorAction SilentlyContinue
    New-NetFirewallRule -DisplayName "TVA-Port-$port" -Direction Inbound -Protocol TCP -LocalPort $port -Action Allow | Out-Null
}

Write-Success "Firewall ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh"

# ========================================
# 10. Hi·ªÉn th·ªã th√¥ng tin
# ========================================
Write-Step "‚úÖ DEPLOYMENT HO√ÄN T·∫§T!"

Write-Host ""
Write-Host "üìä Tr·∫°ng th√°i Containers:" -ForegroundColor Cyan
docker-compose ps

Write-Host ""
Write-Host "üåê ƒê·ªãa ch·ªâ truy c·∫≠p:" -ForegroundColor Cyan
Write-Host "  Local (Windows):     http://localhost:4000" -ForegroundColor White
Write-Host "  Tailscale Network:   http://$tailscaleIP:4000" -ForegroundColor White
Write-Host "  pgAdmin:             http://localhost:5051" -ForegroundColor White
Write-Host "                       Email: admin@tva.com" -ForegroundColor Gray
Write-Host "                       Pass:  Villad24@" -ForegroundColor Gray

Write-Host ""
Write-Host "üîß L·ªánh qu·∫£n l√Ω h·ªØu √≠ch:" -ForegroundColor Cyan
Write-Host "  Xem logs:            docker-compose logs -f" -ForegroundColor Gray
Write-Host "  Xem logs app:        docker-compose logs -f fabric-library" -ForegroundColor Gray
Write-Host "  Restart app:         docker-compose restart fabric-library" -ForegroundColor Gray
Write-Host "  Stop t·∫•t c·∫£:         docker-compose stop" -ForegroundColor Gray
Write-Host "  Start l·∫°i:           docker-compose start" -ForegroundColor Gray
Write-Host "  X√≥a t·∫•t c·∫£:          docker-compose down -v" -ForegroundColor Gray

Write-Host ""
Write-Host "üì± Truy c·∫≠p t·ª´ Mac qua Tailscale:" -ForegroundColor Cyan
Write-Host "  http://$tailscaleIP:4000" -ForegroundColor White

Write-Host ""
Write-Host "üíæ Backup Database:" -ForegroundColor Cyan
Write-Host "  docker exec tva-postgres pg_dump -U postgres tva > backup.sql" -ForegroundColor Gray

Write-Host ""
Write-Host "Press any key to exit..." -ForegroundColor DarkGray
$null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")

